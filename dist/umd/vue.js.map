{"version":3,"file":"vue.js","sources":["../../src/utils/index.js","../../src/observe/array.js","../../src/observe/index.js","../../src/state.js","../../src/compiler/parser-html.js","../../src/compiler/index.js","../../src/init.js","../../src/index.js"],"sourcesContent":["/*\r\n *\r\n *@param { data} 判断当前数据是不是对象\r\n *\r\n */\r\nexport function isObject(data) {\r\n  return typeof data === \"object\" && data !== null;\r\n}\r\n\r\n/*\r\n *\r\n *@param {data,key,value}  给对象设置一个不可枚举属性\r\n *\r\n */\r\nexport function def(data, key, value) {\r\n  Object.defineProperty(data, key, {\r\n    enumerable: false,\r\n    configurable: false,\r\n    value: value,\r\n  });\r\n}\r\n","//重写数组的哪些方法 7个 push shift unshift pop reverse sort splice reverse 会导致数组本身发生变化\r\n// slice()并不会导致数组本身发生变化\r\n\r\nlet oldArrayMethods = Array.prototype;\r\n// value._proto_ = arrayMethods 原型链查找的问题，会向上查找，先查找我重写的，重写的没有会继续向上查找\r\n// arrayMethods.__proto__ = oldArrayMethods (原先数组上的方法)\r\nexport let arrayMethods = Object.create(oldArrayMethods);\r\n \r\nconst methods = [\r\n  \"push\",\r\n  \"shift\",\r\n  \"unshift\",\r\n  \"pop\",\r\n  \"reverse\",\r\n  \"sort\",\r\n  \"splice\",\r\n  \"reverse\",\r\n];\r\n\r\nmethods.forEach(method=>{\r\n      arrayMethods[method] = function (...args){\r\n            console.log('用户调用了push方法');//AOP切片编程\r\n            const result = oldArrayMethods[method].apply(this,args);//调用原生的数组方法\r\n            //**push unshift 添加的元素可能还是一个对象，还需要进行监控**\r\n            let inserted; //当前用户插入的元素\r\n            let ob = this.__ob__;  //获取observe的实例\r\n            switch(method){\r\n                  case 'push':\r\n                  case 'unshift':\r\n                        inserted = args;\r\n                        break;\r\n                  case 'splice':  //3个 新增的属性splice 有删除、新增的功能arr.splice(0,1,{name:1})\r\n                        inserted = args.slice(2);\r\n                  default:\r\n                        break;\r\n\r\n            }\r\n            if(inserted) ob.observerArray(inserted); //**将新增属性继续进行观测,如果不对__ob__进行枚举限制，会造成递归栈溢出**\r\n            return result;\r\n      }\r\n})","/*\r\n * @Author: JackYu\r\n * @Date: 2021-08-29 22:41:50\r\n * @LastEditors: JackYu\r\n * @LastEditTime: 2021-08-29 22:45:19\r\n * @Description: file content\r\n */\r\n\r\nimport { isObject, def } from \"../utils/index\";\r\nimport { arrayMethods } from \"./array.js\";\r\n\r\nclass Observe {\r\n  constructor(value) {\r\n    //vue如果数据的层次过多，需要递归地去解析对象中的属性，依次增加set和get方法\r\n    //value.__ob__ = this  //**给每一个监控过的对象都增加一个__ob__属性 这样array.js中就可以拿到Observe的实例，对新添加的数组元素进行观测**\r\n\r\n    // Object.defineProperty(value, \"__ob__\", {\r\n    //   enumerable: false,\r\n    //   configurable: false,\r\n    //   value: this,\r\n    // });\r\n    // 将上述方法放到工具类中\r\n    def(value, \"__ob__\", this); \r\n\r\n    // 对数组进行监控\r\n    if (Array.isArray(value)) {\r\n      // 如果是数组的话并不会对索引进行观测 因为会导致性能问题\r\n      // 前端开发中极少地去操作索引\r\n      //重写这三个方法push shift unshift，对数组进行监测即可(函数的劫持)\r\n      value.__proto__ = arrayMethods;  //__一定是两个'_',不能漏下\r\n      // 如果数据里放的是对象再监控\r\n      this.observerArray(value);\r\n    } else {\r\n      this.walk(value); //对对象进行观测\r\n    }\r\n  }\r\n  observerArray(value) {\r\n    //[{}] 数组中存放对象时再进行检测，其他基本数据类型检测并没有意义\r\n    for (let i = 0; i < value.length; i++) {\r\n      observe(value[i]);\r\n    }\r\n  }\r\n\r\n  walk(data) {\r\n    let keys = Object.keys(data); //[name,age,address]\r\n    keys.forEach((key) => {\r\n      defineReactive(data, key, data[key]);\r\n    });\r\n    // for(let i =0 ;i<keys.length ;i++){\r\n    //     let key = keys[i];\r\n    //     let value = data[key];\r\n    //     defineReactive(data,key,value) //定义响应式数据\r\n    // }\r\n  }\r\n}\r\n\r\nfunction defineReactive(data, key, value) {\r\n  observe(value); //（若为对象或者数组）递归实现深度检测    对象结构越复杂递归越多，所以对象尽量不要写的层次太深，否则会造成性能的浪费\r\n  Object.defineProperty(data, key, {\r\n    get() {\r\n      //获取值的时候做一些操作\r\n      return value;\r\n    },\r\n    set(newValue) {\r\n      //修改值的时候也可以做一些操作\r\n      if (newValue === value) {\r\n        return;\r\n      }\r\n      observe(newValue); //继续劫持用户设置的值，因为有可能用户设置的值是一个对象\r\n      value = newValue;\r\n    },\r\n  });\r\n}\r\n\r\n//把data中的数据 都使用Object.defineProperty（）重新定义 es5\r\n// Object.defineProperty（）不能兼容IE8 以及以下 vue2 无法兼容ie8\r\nexport function observe(data) {\r\n  let isObj = isObject(data);\r\n  if (!isObj) {\r\n    return;\r\n  }\r\n  return new Observe(data); //用来观测数据\r\n}\r\n","/*\r\n * @Author: JackYu\r\n * @Date: 2021-08-29 22:24:35\r\n * @LastEditors: JackYu\r\n * @LastEditTime: 2021-08-29 22:46:20\r\n * @Description: file content\r\n */\r\nimport {observe} from './observe/index'\r\nexport function initState(vm) {\r\n    const opts = vm.$options  //vue中使用this.options指代用户传递的属性\r\n    //vue的数据来源 属性 方法 数据 计算属性 watch(vue的初始化流默认顺序)\r\n    if (opts.props) {\r\n        initProps(vm);\r\n    }\r\n    if (opts.methods) {\r\n        initMethods(vm);\r\n    }\r\n    if (opts.data) {\r\n        initData(vm);\r\n    }\r\n    if (opts.computed) {\r\n        initComputed(vm);\r\n    }\r\n    if (opts.watch) {\r\n        initWatch(vm);\r\n    }\r\n}\r\n\r\nfunction initProps() { }\r\nfunction initMethods() { }\r\nfunction initData(vm) {\r\n    //数据的初始化工作\r\n    let data = vm.$options.data;\r\n    //重要\r\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data;\r\n    //对象劫持 用户改变了数据 我希望可以得到通知 ==》刷新数据\r\n    //MVVM模式 数据变化可以驱动视图变化\r\n\r\n    // Object.defineProperty（）给属性增加get和set方法\r\n    observe(data); //响应式原理\r\n}\r\nfunction initComputed() { }\r\nfunction initWatch() { }","// AST语法树  用对象来描述原生语法的\n// 虚拟dom  用对象来描述dom节点\n\n// html-parser 正则相关 （?：为匹配但不捕获） vue/parser/compiler\n// arguments[0] = 匹配的标签 arguments[1] = 匹配的标签名字\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`; // abc-aaa命名空间  \\\\斜杠转义\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; //<abc-aaa:asdads> ->aaa:asdads\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的 </div>\n// let r = '<a:b>'.match(startTagOpen)\n// console.log(r);\n//       id       = \"asdsad\" or  'asdsad'  or  asdsad\n// ^我们常见用法是[^0-9]这种，在[]中放到开头，用于表示排除，也就是非的意思.如果^写到了[]的其他地方，也就是不在开头时，它就表示它自己的字面意思了\n//^\\s*->n个空格\n// [^\\s\"'<>\\/=]+  空格\"'<>/存在n个\n// (?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+))\n// :\\s*(=)\\s* n个空格 = n个空格\n// (?:[^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)  匹配不捕获非\"\"或''或什么都不写n个\n\nconst attribute =\n  /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\n\n// console.log(`aa=\"123\"`.match(attribute));\n// console.log(`aa='1234'`.match(attribute));\n// console.log(`aa=12345`.match(attribute));\n\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的 > <div/>-> '>'\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; //  {{aaa}} -> 'aaa'\n\nlet root = null; //ast语法树的树根\nlet currentParent; //表示当前父亲是谁\nlet stack = []; //<div><p><span></span></p></div> [div,p,span]->用户检测标签是否闭合一一对应\nconst ELEMENT_TYPE = 1; //元素类型\nconst TEXT_TYPE = 3; //文本类型\n\nfunction createASTElement(tagName, attrs) {\n  return {\n    tag: tagName,\n    type: ELEMENT_TYPE,\n    children: [],\n    attrs,\n    parent: null,\n  };\n}\n\nfunction start(tagName, attrs) {\n  // 遇到开始标签 就创建一个AST元素\n  let element = createASTElement(tagName, attrs);\n  if (!root) {\n    //若当前根节点为空，则将创建的第一个元素置为根节点\n    root = element;\n  }\n  currentParent = element; //把当前元素标记成父AST树\n  stack.push(element); //将开始标签存放到栈中\n}\n\nfunction chars(text) {\n  text = text.replace(/\\s/g,'') //替换text中所有的空字符串\n  if(text){\n    currentParent.children.push({ //将其放入当前父节点的children中\n      text,\n      type:TEXT_TYPE\n    })\n  }\n}\n\n// <div><p> [div,p]\n// <div><p></p></div>  [div,p] -> [div]\nfunction end(tagName) {\n  let element = stack.pop(); //拿到的ast对象\n  //我要标识当前这个p是属于这个div的儿子\n  currentParent = stack[stack.length -1 ];\n  if(currentParent){\n    console.log(currentParent);\n    element.parent = currentParent;\n    currentParent.children.push(element); //实现一个树的父子关系\n  }\n}\n\n// 解析HTML字符串转换成AST\nexport function parseHTML(html) {\n  while (html) {\n    let textEnd = html.indexOf(\"<\");\n    if (textEnd == 0) {\n      // 如果当前'<'索引为0 肯定是一个标签 开始标签 或者 结束标签 （默认第一个为开始标签）\n      let startTagMatch = parseStartTag(); //通过这个方法获取到匹配到的结果 tagName,attrs\n      if (startTagMatch) {\n        start(startTagMatch.tagName, startTagMatch.attrs); //1、解析开始标签\n        // console.log(startTagMatch);\n        // start();\n        continue; //如果开始标签匹配完毕后 继续下一次匹配\n      }\n      let endTagMatch = html.match(endTag);\n      if (endTagMatch) {\n        advance(endTagMatch[0].length); //</p>匹配'</'到后,删除改文本\n        end(endTagMatch[1]); //2、解析结束标签\n        continue;\n      }\n    }\n    let text;\n    if (textEnd >= 0) {\n      text = html.substring(0, textEnd); //     <p>hello</p> </div>; text则为<p>前的文本（标签中本身可以放的文本）， textEnd为文本的距离\n    }\n    if (text) {\n      //如果text存在，则说明有文本，则需要去除该文本\n      advance(text.length);\n      chars(text); //3、解析文本\n    }\n  }\n  // 截取解析后的html字符串\n  function advance(n) {\n    html = html.substring(n);\n  }\n  // 解析开始的标签\n  function parseStartTag() {\n    let start = html.match(startTagOpen);\n    if (start) {\n      // console.log(start);\n      const match = {\n        //匹配到的标签\n        tagName: start[1],\n        attrs: [],\n      };\n      advance(start[0].length); //将标签删除\n      // console.log(html);\n      let end, attr;\n      // 不停地去解析html获取html属性，直到遇到结束标签为止\n      while (\n        !(end = html.match(startTagClose) && (attr = html.match(attribute)))\n      ) {\n        // 对属性进行解析\n        advance(attr[0].length); //将匹配到的属性去掉\n        match.attrs.push({\n          name: attr[1],\n          value: attr[3] || attr[4] || attr[5], //attr[3]默认为双引号中的值 attr[4]为单引号中的值 attr[5]为没有符号中的值\n        });\n        // console.log(html);\n      }\n      if (end) {\n        //去掉标签的'>'\n        // 循环完之后需要把end也删去\n        advance(end[0].length);\n        return match;\n      }\n    }\n  }\n  return root;\n}","/*\r\n * @Author: JackYu\r\n * @Date: 2021-09-12 22:17:33\r\n * @LastEditors: JackYu\r\n * @LastEditTime: 2021-09-12 22:32:21\r\n * @Description: file content\r\n */\r\n\r\nimport { parseHTML } from \"./parser-html\";\r\n\r\nfunction genProps(attrs){ //处理属性 拼接成属性的字符串\r\n  let str = '';\r\n  for (let i = 0; i < attrs.length; i++) {\r\n    let str = '';\r\n    if(attrs.name === 'style'){\r\n      let obj = {};\r\n      // style=\"color: red;font-size: 14px;\" => {style:{color:'red'},id:name,}\r\n      attrs.value.splice(';').forEach(item => {  //属性之间都是以';'为分割\r\n        let [key,value] = item.split(':');  //使用结构赋值获取到属性的key和value\r\n        obj[key] = value //生成相应的属性对象\r\n      });\r\n      attrs.value = obj\r\n    }\r\n    str +=`${attrs.name}:${ JSON.stringify(attrs.value)}`\r\n  }\r\n  return `{${str.slice(0,-1)}}` //去掉尾巴的','号\r\n}\r\n\r\nfunction generate(el) { //[{name:'id',value:'app'},{}] -> {id:app,a:1,b:2}\r\n  let code = `_c(\"${el.tag}\",\r\n  ${el.attrs.length?genProps(el.attrs):'undefined'})`;  //传入属性\r\n\r\n  return code;\r\n}\r\n\r\nexport function compileToFunction(template) {\r\n  //1)解析html字符串\r\n  let root = parseHTML(template); //将template转换为AST语法树\r\n\r\n  // 需要将ast语法书生成最终的render函数 就是字符串拼接（模板引擎）\r\n  let code = generate(root); //生成render最核心的方法\r\n\r\n  //   <div id=\"app\">\r\n  //   <p>hello {{name}}</p>\r\n  //   </div>\r\n\r\n  // 核心思路就是将模板转换成 下面这段字符串\r\n  //  将ast树，再次转换成js的语法\r\n  //_c(\"div\",{id:app},_c(\"p\",undefined,_v('hello'+ _s(name)))，_v('hello'))  将name转换为字符串\r\n  console.log(code);\r\n  return function render() {};\r\n}\r\n\r\n{\r\n  /* \r\n<div id=\"app\">\r\n   <p>hello</p>\r\n</div>;\r\n-->>\r\nstart div: attrs:[{name:'id',value:'app'}]\r\nstart p \r\ntext hello\r\nend p\r\nend div\r\n\r\n//AST语法树 描述html语法(比虚拟dom更详细)\r\nlet root = {\r\n  // 节点类型  元素类型：1  文本类型：3   nodeType\r\n  type: 1,\r\n  // 标签名，如div\r\n  tag: \"div\",\r\n  // 节点所包含的属性\r\n  attrs: [{ name: \"id\", value: \"app\" }],\r\n  parent: null,\r\n  // 子节点指针\r\n  children: [\r\n    {\r\n      type: 1,\r\n      tag: \"p\",\r\n      attrs: [],\r\n      parent: root,\r\n      type: 1,\r\n      children: [\r\n        {\r\n          text: \"hello\",\r\n          type: 3,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n}; */\r\n}\r\n\r\n// 虚拟dom\r\n// {\r\n//   tag:'div',\r\n//   data:{id:app},\r\n//   children:[]\r\n// }\r\n","/*\r\n * @Author: JackYu\r\n * @Date: 2021-08-29 22:16:10\r\n * @LastEditors: JackYu\r\n * @LastEditTime: 2021-09-12 22:17:52\r\n * @Description: file content\r\n */\r\nimport { initState } from './state'\r\n\r\nimport {compileToFunction}  from './compiler/index.js'\r\n\r\n// 在原型添加init方法\r\nexport function initMixin(Vue) {\r\n    // 初始化流程\r\n    Vue.prototype._init = function (options) {\r\n\r\n        // 数据劫持\r\n\r\n        const vm = this  //vue中使用this.options指代用户传递的属性\r\n        vm.$options = options;\r\n\r\n        // 初始化状态\r\n        initState(vm);  //分割代码\r\n\r\n\r\n\r\n        // 如果用户传入了el属性，需要将页面渲染出来\r\n        //如果用户传入el 就要实现挂载流程\r\n        if (vm.$options.el) {\r\n            vm.$mount(vm.$options.el)\r\n        }\r\n    }\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this;\r\n        const options = vm.$options;\r\n        el = document.querySelector(el); //将el转换为dom对象\r\n\r\n        // 默认先回查找有没有render方法，没用render 会采用template \r\n        // template也没有就会采用传入的el中的内容\r\n\r\n        if (!options.render) {\r\n            // 对模板进行编译\r\n            let template = options.template; //取出模板\r\n            if (!template && el) {\r\n                template = el.outerHTML;  //获取整个el对象，存在兼容性问题，考虑兼容可以创建一个div把el放入div中\r\n            }\r\n            // console.log(template)\r\n            // 我们需要将template 转化为render方法 vue1.0(字符串正则化匹配，性能较差) vue 2.0(虚拟DOM)\r\n\r\n            const render = compileToFunction(template);\r\n            options.render = render\r\n        }\r\n        // 后续传的直接使用options.render即可，用户传了render则使用传的render，没传则使用编译好的 \r\n    }\r\n}","/*\r\n * @Author: JackYu\r\n * @Date: 2021-08-22 23:02:02\r\n * @LastEditors: JackYu\r\n * @LastEditTime: 2021-08-29 22:18:58\r\n * @Description: Vue的核心代码\r\n */\r\n\r\nimport { initMixin } from './init'\r\n\r\n// Vue的核心代码 只是vue的一个声明\r\nfunction Vue(options) {\r\n    // 进行Vue的初始化操作\r\n    this._init(options)\r\n}\r\n\r\n// 通过引入文件的方式，给Vue原型上添加方法\r\ninitMixin(Vue);\r\n\r\nexport default Vue"],"names":["isObject","data","def","key","value","Object","defineProperty","enumerable","configurable","oldArrayMethods","Array","prototype","arrayMethods","create","methods","forEach","method","console","log","args","result","apply","inserted","ob","__ob__","slice","observerArray","Observe","isArray","__proto__","walk","i","length","observe","keys","defineReactive","get","set","newValue","isObj","initState","vm","opts","$options","props","initData","computed","watch","_data","call","ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","root","currentParent","stack","ELEMENT_TYPE","TEXT_TYPE","createASTElement","tagName","attrs","tag","type","children","parent","start","element","push","chars","text","replace","end","pop","parseHTML","html","textEnd","indexOf","startTagMatch","parseStartTag","endTagMatch","match","advance","substring","n","attr","name","genProps","str","obj","splice","item","split","JSON","stringify","generate","el","code","compileToFunction","template","render","initMixin","Vue","_init","options","$mount","document","querySelector","outerHTML"],"mappings":"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"}